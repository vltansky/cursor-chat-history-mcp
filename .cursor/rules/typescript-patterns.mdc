---
description:
globs:
alwaysApply: true
---
# TypeScript Development Patterns

This guide covers TypeScript patterns and best practices used in this project.

## **Zod Schema Patterns**

- **Schema Definition and Type Inference**
  - Define schemas using Zod for runtime validation
  - Use `z.infer<typeof schema>` for TypeScript type inference
  - Export both schemas and inferred types for reuse

```typescript
// ✅ DO: Define schema and infer types
export const mySchema = z.object({
  id: z.string().min(1),
  count: z.number().optional().default(10),
  tags: z.array(z.string()).optional()
});

export type MyInput = z.infer<typeof mySchema>;

// ✅ DO: Use in function signatures
export async function processData(input: MyInput): Promise<MyOutput> {
  const validated = mySchema.parse(input);
  // ...
}
```

- **Optional Fields with Defaults**
  - Use `.optional().default(value)` for optional fields with defaults
  - Use `.optional()` for truly optional fields
  - Use `.min()`, `.max()` for validation constraints

```typescript
// ✅ DO: Proper optional field handling
const schema = z.object({
  required: z.string().min(1),
  withDefault: z.number().optional().default(10),
  trulyOptional: z.boolean().optional(),
  constrainedArray: z.array(z.string()).min(1).max(100).optional()
});
```

## **Error Handling Patterns**

- **Consistent Error Types**
  - Use `Error` instances for proper error handling
  - Include meaningful error messages
  - Handle both known and unknown error types

```typescript
// ✅ DO: Proper error handling
try {
  const result = await riskyOperation();
  return result;
} catch (error) {
  if (error instanceof Error) {
    throw new Error(`Operation failed: ${error.message}`);
  }
  throw new Error('Unknown error occurred');
}

// ✅ DO: Error type checking in handlers
catch (error) {
  const message = error instanceof Error ? error.message : 'Unknown error occurred';
  return { error: message };
}
```

## **Async/Await Patterns**

- **Resource Management**
  - Always clean up resources in finally blocks
  - Use try-finally for resource cleanup
  - Await all async operations properly

```typescript
// ✅ DO: Proper resource management
export async function processWithCleanup<T>(
  resource: Resource,
  operation: (resource: Resource) => Promise<T>
): Promise<T> {
  try {
    await resource.connect();
    return await operation(resource);
  } finally {
    resource.close();
  }
}
```

## **Module Import/Export Patterns**

- **Consistent Import Style**
  - Use `.js` extensions for local imports (required for ESM)
  - Group imports: external packages, then local modules
  - Export types and implementations separately when needed

```typescript
// ✅ DO: Proper import organization
import { z } from 'zod';
import { SomeExternalType } from 'external-package';

import { localFunction } from './local-module.js';
import { DatabaseReader } from '../database/reader.js';
import type { LocalType } from './types.js';

// ✅ DO: Clear exports
export { myFunction };
export type { MyType, MyInput, MyOutput };
```

## **Type Safety Patterns**

- **Strict Type Definitions**
  - Define interfaces for complex objects
  - Use union types for known string literals
  - Avoid `any` - use `unknown` when type is truly unknown

```typescript
// ✅ DO: Strict type definitions
export interface ConversationSummary {
  composerId: string;
  format: 'legacy' | 'modern';
  messageCount: number;
  hasCodeBlocks: boolean;
  relevantFiles: string[];
  attachedFolders: string[];
  firstMessage?: string;
  size: number;
}

// ✅ DO: Use unknown for uncertain types
function processUnknownData(data: unknown): ProcessedData {
  if (typeof data === 'object' && data !== null) {
    // Type narrowing logic
  }
  throw new Error('Invalid data format');
}
```

## **Function Signature Patterns**

- **Clear Parameter and Return Types**
  - Always specify return types for public functions
  - Use generic types when appropriate
  - Document complex types with JSDoc

```typescript
// ✅ DO: Clear function signatures
/**
 * Retrieves conversation data with optional filtering
 */
export async function getConversations(
  filters: ConversationFilters
): Promise<ConversationSummary[]> {
  // Implementation
}

// ✅ DO: Generic functions when needed
export async function processItems<T, R>(
  items: T[],
  processor: (item: T) => Promise<R>
): Promise<R[]> {
  return Promise.all(items.map(processor));
}
```

## **File Organization**

- **Logical Module Structure**
  - Group related functionality in modules
  - Separate types, implementations, and utilities
  - Use barrel exports for clean public APIs

```typescript
// types.ts - Type definitions
export interface MyType { /* ... */ }

// implementation.ts - Core logic
export class MyClass { /* ... */ }

// utils.ts - Helper functions
export function helperFunction() { /* ... */ }

// index.ts - Barrel export
export type { MyType } from './types.js';
export { MyClass } from './implementation.js';
export { helperFunction } from './utils.js';
```

## **File References**

- Core server: [src/server.ts](mdc:src/server.ts)
- Type definitions: [src/database/types.ts](mdc:src/database/types.ts)
- Tool implementations: [src/tools/conversation-tools.ts](mdc:src/tools/conversation-tools.ts)
